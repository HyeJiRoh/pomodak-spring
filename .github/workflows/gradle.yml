# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:                               # 어떤 조건에서 workflow 실행할지 컨디션 작성
  push:
    branches: [ "main" ]          # main 브랜치에 push 될 때마다 재배포
  pull_request:
    branches: [ "main" ]          # main 브랜치에 PR 생성이나 업데이트 되면 재배포

permissions:
  contents: read                  # 워크플로우가 Repository 컨텐츠 읽을 수 있는 권한 가지도록 설정

jobs:                             # 어떤 일들을 실행할 지 하나씩 작성
  build:
    runs-on: ubuntu-latest        # github action의 CI 서버 runner가 어떤 환경 갖출지 고르는 것
    steps:
      - name: checkout              # github action과 연결된 Repository 코드를 runner로 옮기는 것
        uses: actions/checkout@v3

      - name: Set up JDK 11         # jdk11 버전으로 작성된 프로젝트이기 때문에 이에 맞춰 setup
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: make application-database.yml    # application-database.yml 생성
        run:
          cd ./src/main/resources              # application-database.yml 생성
          touch ./application-database.yml    # application-database.yml 파일 생성
          echo "${{ secrets.DATABASE }}" >> ./application-database.yaml   # Github-Actions 에서 설정한 값을 application-database.yml 파일에 쓰기
        shell: bash

      - name: Build with Gradle
        run: ./gradlew bootJar
      #      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      #      with:
      #        arguments: build

      - name: web docker build and push     # 웹 이미지 빌드 및 Docker Hub에 push
        run: |                               # Repo 이름/hororok 이라는 이미지가 dockerfile 기반으로 생성될 것
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/hororok .       
          docker push ${{ secrets.DOCKER_REPO }}/hororok
      

      # docker compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/second-eyes-web
            sudo docker pull ${{ secrets.DOCKER_REPO }}/second-eyes-nginx
            docker-compose up -d
            docker image prune -f